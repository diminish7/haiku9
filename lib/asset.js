// Generated by CoffeeScript 1.7.1
(function() {
  var Asset, C50N, CoffeeScript, Evie, FileSystem, basename, extname, glob, jade, join, md2html, stylus, _ref;

  FileSystem = require("fs");

  _ref = require("path"), basename = _ref.basename, extname = _ref.extname, join = _ref.join;

  glob = require("panda-glob");

  Evie = require("evie");

  md2html = require("marked");

  jade = require("jade");

  stylus = require("stylus");

  C50N = require("c50n");

  CoffeeScript = require("coffee-script");

  Asset = (function() {
    Asset.events = new Evie;

    Asset.read = function(path) {
      return this.events.source(function(events) {
        return FileSystem.readFile(path, {
          encoding: "utf8"
        }, function(error, content) {
          if (error == null) {
            return events.emit("success", new Asset(path, content));
          } else {
            return events.emit("error", error);
          }
        });
      });
    };

    Asset.readFiles = function(files) {
      return this.events.source(function(events) {
        if (files.length > 0) {
          return Asset.events.serially(function(go) {
            go(function() {
              return Asset.events.concurrently(function(go) {
                var file, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    return go(file, function() {
                      return Asset.read(file);
                    });
                  })(file));
                }
                return _results;
              })();
            });
            return go(function(assets) {
              return events.emit("success", assets);
            });
          })();
        } else {
          return events.emit("success", []);
        }
      });
    };

    Asset.readDir = function(path) {
      return this.events.source(function(events) {
        return FileSystem.readdir(path, function(error, files) {
          var file;
          if (error == null) {
            return Asset.readFiles((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                _results.push(join(path, file));
              }
              return _results;
            })()).forward(events);
          } else {
            return events.emit("error", error);
          }
        });
      });
    };

    Asset.glob = function(path, pattern) {
      return this.events.source(function(events) {
        return events.safely(function() {
          var file;
          return Asset.readFiles((function() {
            var _i, _len, _ref1, _results;
            _ref1 = glob(path, pattern);
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              file = _ref1[_i];
              _results.push(join(path, file));
            }
            return _results;
          })()).forward(events);
        });
      });
    };

    Asset.registerFormatter = function(_arg, formatter) {
      var from, to, _base, _base1;
      to = _arg.to, from = _arg.from;
      if (this.formatters == null) {
        this.formatters = {};
      }
      if ((_base = this.formatters)[from] == null) {
        _base[from] = {};
      }
      this.formatters[from][to] = formatter;
      if (this.formatsFor == null) {
        this.formatsFor = {};
      }
      if ((_base1 = this.formatsFor)[to] == null) {
        _base1[to] = [];
      }
      return this.formatsFor[to].push(from);
    };

    Asset.registerExtension = function(_arg) {
      var extension, format;
      extension = _arg.extension, format = _arg.format;
      if (Asset.extensions == null) {
        Asset.extensions = {};
      }
      Asset.extensions[extension] = format;
      if (Asset.extensionFor == null) {
        Asset.extensionFor = {};
      }
      return Asset.extensionFor[format] = extension;
    };

    Asset.extensionsForFormat = function(format) {
      var _i, _len, _ref1, _results;
      _ref1 = this.formatsFor[format];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        format = _ref1[_i];
        _results.push(this.extensionFor[format]);
      }
      return _results;
    };

    Asset.patternForFormat = function(format, name) {
      if (name == null) {
        name = "*";
      }
      return "" + name + ".{" + (this.extensionsForFormat(format)) + ",}";
    };

    Asset.globForFormat = function(path, format) {
      return this.glob(path, this.patternForFormat(format));
    };

    Asset.globNameForFormat = function(path, name, format) {
      return this.events.source(function(events) {
        return Asset.glob(path, Asset.patternForFormat(format, name)).success(function(assets) {
          var key, keys;
          keys = Object.keys(assets);
          if (keys.length > 0) {
            key = keys[0];
            return events.emit("success", assets[key]);
          } else {
            return events.emit("error", new Error("Asset: No matching " + format + " asset found "), +(" for " + (join(path, name))));
          }
        }).error(function(error) {
          return events.emit(error);
        });
      });
    };

    function Asset(path, content) {
      var divider, error, extension, frontmatter;
      this.path = path;
      extension = extname(this.path);
      this.key = basename(this.path, extension);
      this.format = Asset.extensions[extension.slice(1)];
      divider = content.indexOf("\n---\n");
      if (divider >= 0) {
        frontmatter = content.slice(0, +(divider - 1) + 1 || 9e9);
        try {
          this.data = C50N.parse(frontmatter);
        } catch (_error) {
          error = _error;
          Asset.events.emit("error", error);
        }
        this.content = content.slice(divider + 5);
      } else {
        this.content = content;
      }
    }

    Asset.prototype.render = function(format, context) {
      var formatter, _ref1;
      if (context == null) {
        context = this.context;
      }
      formatter = (_ref1 = Asset.formatters[this.format]) != null ? _ref1[format] : void 0;
      if (formatter == null) {
        formatter = Asset.identityFormatter;
      }
      context.filename = this.path;
      return formatter(this.content, context);
    };

    return Asset;

  })();

  Asset.registerExtension({
    extension: "md",
    format: "markdown"
  });

  Asset.registerExtension({
    extension: "jade",
    format: "jade"
  });

  Asset.registerExtension({
    extension: "styl",
    format: "stylus"
  });

  Asset.registerExtension({
    extension: "coffee",
    format: "coffeescript"
  });

  Asset.registerExtension({
    extension: "js",
    format: "javascript"
  });

  Asset.identityFormatter = function(content) {
    return Asset.events.source(function(events) {
      return events.emit("success", content);
    });
  };

  Asset.registerFormatter({
    to: "html",
    from: "markdown"
  }, function(markdown) {
    return Asset.events.source(function(events) {
      return events.safely(function() {
        return events.emit("success", md2html(markdown));
      });
    });
  });

  Asset.registerFormatter({
    to: "html",
    from: "jade"
  }, function(markup, context) {
    return Asset.events.source(function(events) {
      return events.safely(function() {
        context.cache = true;
        return events.emit("success", jade.renderFile(context.filename, context));
      });
    });
  });

  Asset.registerFormatter({
    to: "css",
    from: "stylus"
  }, function(code) {
    return Asset.events.source(function(events) {
      return events.safely(function() {
        return stylus.render(code, events.callback);
      });
    });
  });

  Asset.registerFormatter({
    to: "javascript",
    from: "coffeescript"
  }, function(code) {
    return Asset.events.source(function(events) {
      return events.safely(function() {
        return events.emit("success", CoffeeScript.compile(code));
      });
    });
  });

  module.exports = Asset;

}).call(this);
